extends ./jade/_layout.jade
block post
	//- aquí empieza el contenido del post	
	p
		| A menudo un proyecto(dependiendo de su complejidad) es programado por más
		| de un desarollador, es entonces  muy normal encontrarse con la situación en
		| la que un "programador A" tendrá que modificar el archivo "X" que creo un
		| "programador B". Por buenas practicas, antes de que el "programador A" empiece
		| el cambio en el archivo "X", debe considerar 
		b
			| los estándares que el "programador B" definió, 
		| esto ayudará a poder evitar futuros conflictos en la forma de trabajo
		| de los archivos y como consecuencia, ayudar a que el 
		b
			| proyecto sea más mantenible.
		
	p
		| Parte de los estándares de programación son los estilos de código, que no son nada más
		| que la estandarización de los formatos de los archivos. Por ejemplo:
	p
		b
			| ¿Usamos espacios o tabs? ¿Cuál será el ancho de cada tab?
			| ¿Permitimos los espacios en blanco al final de cada línea?
	
	h2 Automatizando
	p
		| Definir los estilos de código nos ayudará mucho como equipo para trabajar bajo estandares,
		| podríamos tener estilos de código muy generales como por ejemplo:
		|	usar tabs para las indentaciones de todos los archivos o muy especificos
		|	como por ejemplo: usar 4 columnas de indentación solo para
		|	los archivos html, pero aplicarlos manualmente será un dolor de cabeza constante
		|	porque tocará revisar constantemente que estilos debemos aplicar a cada archivo
		|	y mantener informado al equipo para que lo apliquen en sus respectivos IDE's.
	p
		|	¡Pero calma! Para eso existe EditorConfig, para ayudarnos a automatizar y centralizar
		|	los estilos de código, usarlo es tan sencillo como instalar el plugin respectivo a nuestro IDE
		| y agregar a nuestro proyecto un archivo extensión ".editorconfig"
		| con todas los estilos de códigos que hayamos definido.
		
	p
		img.aligncenter(
			src="http://frontendlabs.io/wp-content/uploads/2016/02/editorconfig-logo.png", 
			alt="editorconfig editorconfig-logo")
	h2 Estilos de código más usados
	p
		| Editorconfig nos ofrece 
		a(
			href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties",
			target="_blank",
			title="Lista de propiedades de Editorconfig") 
			| una lista variada de estilos que puede aplicar
		| , 
		| (algunos no son compatibles con ciertos IDES)
		| los más importante y usados son:
	ul
		li
			p
				b Estilo de identación(indent_style): 
				| Tabs o espacios.
		li
			p
				b Ancho de indentación(indent_size): 
				| Número de columnas por indentación.
		li
			p 
				b Final de línea(end_of_line): 
				| Control de salto de linea (LF, CR, CRLF).
		li
			p
				b	Charset(charset):
				| Control del charset
		li
			p  
				b Recortar espacios en blanco(trim_trailing_whitespace): 
				| Eliminar cualquier
				| espacio en blanco precedido por una nueva linea.
		li
			p  
				b Insertar nueva línea al final del archivo(new_line_final):
				| Insertar un nueva línea al final del archivo
				| esta es una 
				a(
					href='http://stackoverflow.com/questions/729692/why-should-text-files-end-with-a-newline',
					target="_blank",
					title="Linea nueva al final en Editorconfig") 
					| práctica muy recomendada
				| ).
	p
		| Puedes clonar este  
		a(
			href="https://github.com/emanrique/editorconfig_speak",
			target="_blank",
			title="Repositorio de ejemplo de editorconfig") repositorio
		| para ver un ejemplo del uso de EditorConfig
		| (no olvides darle una estrellita).
	
	h2 Utilizando EditorConfig
	p
		| Para empezar a utilizar EditorConfig debemos seguir los siguientes pasos:

	ol
		li
			p
				| Lo primero que debemos hacer como lo mencioné antes, es 
				a(
					href="http://editorconfig.org/#download", 
					title="editorconfig-plugins",
					target="_blank") instalar el plugin de Editorconfig en nuestro IDE
					|.
			p.irrelevant
				| Nota: Algunos IDEs ya vienen con el soporte integrado.
		li
			p
				| Creamos en la raíz de nuestro proyecto el archivo 
				span.inline_file .editorconfig
			p
				img.aligncenter(
					src="http://frontendlabs.io/wp-content/uploads/2016/02/editorconfig-file.png",
					alt="editorconfig editorconfig-ile")
		li
			p
				| Definimos los estilos de código, podríamos tener estilos de código generales o específicos.
			p
				img.aligncenter(
					src="http://frontendlabs.io/wp-content/uploads/2016/02/example-editorconfig.png",
					alt="editorconfig editorconfig-example")
			p.irrelevant
				| Podemos tener tantos archivos 
				span.inline_file .editorconfig 
				|  como deseemos por carpeta dentro de un proyecto,
				| pero solo el principal debe tener la propiedad 
				span.inline_code root = true
				| .
	p
		|	¡Y listo! Con esto cada vez que trabajemos con un archivo, Editorconfig se
		|	encargará de 
		b aplicar automáticamente los estilos de código 
		| y no importará el IDE con el que trabajemos mientras tengamos el plugin instalado,
		|	todos podremos utilizar el mismo estilo de código.
	blockquote
		p
			| EditorConfig solo aplicará
			| el formato que hayamos definido siempre y cuando se abra y guarde el archivo.
		
	h2 Migrando
	p
		|	Hasta ahora hemos entendido el papel fundamental que tiene EditorConfig al momento
		|	de estandarizar y el tiempo que nos va a ahorrar definiendo en un solo archivo de estilos
		|	que funcione en cualquier IDE, pero 
		b ¿Qué pasa si ya tenemos un proyecto avanzado
			|	y queremos aplicarlo? 
	p
		| Una idea poco práctica sería abrir y cerrar todos los archivos para que Editorconfig
		|	los formateé. Pero una vez más podemos automatizar este proceso, utilizando 
		| alguna herramienta que nos permita refactorizar
		|	nuestros archivos en base a nuestro archivo editorconfig.Podemos utilizar entonces 
		| por ejemplo un 
		b npm 
		| que nos ayude a hacer el formateo de manera automática, un paquete bastante
		| utilizado es 
		b editorconfig-tools.
		| Lo primero que debemos hacer es instalar de forma global el paquete:
		
	pre.prettyprint.lang-sh
		code
			| npm install -g editorconfig-tools
	
	p
		|	Y luego ejecutar el comando editorconfig-tools para que formatee los achivos en el proyecto que deseemos aplicarlo.
		|	A modo de ejemplo cree un proyecto en el mismo repo llamado 
		span.inline_folder unformat-project 
		| que contiene archivos
		|	que no están formateados y poder testearlo. 
	p.irrelevant
		| Recomiendo utilizar cualquier sistema de control de versiones antes de ejecutar
		| cualquier comando.
	p
		| Lo que tendríamos que hacer es ejecutar el siguiente comando en el folder 
		span.inline_folder unformat-project :
	pre.prettyprint.lang-sh
		code
			| editorconfig-tools fix **/*
	p
		| Si todo funcionó bien deberíamos tener una la siguiente salida en la consola:
	img.aligncenter(src="http://frontendlabs.io/wp-content/uploads/2016/02/editorconfig-tools-output.png",
	alt="editorconfig editorconfig-tools")
	
	p
		| Finalmente veremos que todo los archivos del proyecto han sido formateado según las especificaciones
		| de su archivo 
		span.inline_file .editorconfig
	
	p Como podemos ver no hay excusa para no usar EditorConfig, su uso es tan importante
		| para el proceso de estandarización que es necesario considerarlo desde el instante 
		| que el proyecto es creado. Si tienes alguna duda puedes hacermela llegar por los comentarios
		| o escribiendome en twitter a @frontend_3. Te invito también a revisar la versión diapositiva
		| de este post y convencer a tu equipo de lo necesario que es usar Editorconfig
		| (y si te gusta no olvides darle una estrellita y compartir este post). Gracias por tu tiempo
	script(async, 
		class="speakerdeck-embed", 
		data-id="20e83f482f834528b74e6a6314d665ba",
		data-ratio="1.77777777777778", 
		src="//speakerdeck.com/assets/embed.js")
		
	h2 Referencias Bibliograficas
	p
		| Documentación oficial de EditorConfig. 
		a(src="http://editorconfig.org/", title="Documentación oficial de EditorConfig") http://editorconfig.org/
	p
		| TREY HUMMER. EditorConfig.
		a(src="https://treyhunner.com/editorconfig-slides/", title="Editorconfig por Trey Hummer") 
			| https://treyhunner.com/editorconfig-slides/
		
	
	
		
		
	
